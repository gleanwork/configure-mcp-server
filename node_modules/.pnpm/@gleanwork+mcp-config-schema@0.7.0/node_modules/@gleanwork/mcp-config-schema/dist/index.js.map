{"version":3,"sources":["../src/schemas.ts","../src/constants.ts","../src/server-name.ts","../src/builder.ts","../configs/chatgpt.json","../configs/claude-code.json","../configs/claude-desktop.json","../configs/claude-teams-enterprise.json","../configs/cursor.json","../configs/goose.json","../configs/vscode.json","../configs/windsurf.json","../src/registry.ts"],"sourcesContent":["import { z } from 'zod';\nexport const PlatformSchema = z.enum(['darwin', 'linux', 'win32']);\nexport const ClientIdSchema = z.enum([\n  'claude-code',\n  'vscode',\n  'claude-desktop',\n  'claude-teams-enterprise',\n  'cursor',\n  'goose',\n  'windsurf',\n  'chatgpt',\n]);\nexport const ClientConnectionSupportSchema = z.enum(['http', 'stdio-only', 'both']);\n\nexport const ServerTypeSchema = z.enum(['http', 'stdio']);\n\nexport const LocalConfigSupportSchema = z.enum(['full', 'none']);\n\nexport const ServerModeSchema = z.enum(['local', 'remote']);\nexport const HttpConfigStructureSchema = z.object({\n  typeField: z.string().optional(),\n  urlField: z.string(),\n});\n\nexport const StdioConfigStructureSchema = z.object({\n  typeField: z.string().optional(),\n  commandField: z.string(),\n  argsField: z.string(),\n  envField: z.string().optional(),\n});\n\nexport const ConfigStructureSchema = z.object({\n  serverKey: z.string(),\n  httpConfig: HttpConfigStructureSchema.optional(),\n  stdioConfig: StdioConfigStructureSchema.optional(),\n});\n\nexport const PlatformPathsSchema = z.object({\n  darwin: z.string().optional(),\n  linux: z.string().optional(),\n  win32: z.string().optional(),\n});\n\nexport const MCPClientConfigSchema = z.object({\n  id: ClientIdSchema,\n  name: z.string(),\n  displayName: z.string(),\n  description: z.string(),\n  localConfigSupport: LocalConfigSupportSchema,\n  localConfigNotes: z.string().optional(),\n  documentationUrl: z.string().url().optional(),\n  clientSupports: ClientConnectionSupportSchema,\n  requiresMcpRemoteForHttp: z.boolean(),\n  supportedPlatforms: z.array(PlatformSchema),\n  configFormat: z.enum(['json', 'yaml']),\n  configPath: PlatformPathsSchema,\n  oneClick: z\n    .object({\n      protocol: z.string(),\n      urlTemplate: z.string(),\n      configFormat: z.enum(['base64-json', 'url-encoded-json']),\n    })\n    .optional(),\n  configStructure: ConfigStructureSchema,\n  securityNotes: z.string().optional(),\n});\n\nexport const BuildOptionsSchema = z.object({\n  includeWrapper: z.boolean().optional(),\n});\n\nexport const GleanServerConfigSchema = z\n  .object({\n    mode: ServerModeSchema,\n    serverUrl: z.string().url().optional(),\n    serverName: z.string().optional(),\n    instance: z.string().optional(),\n    apiToken: z.string().optional(),\n  })\n  .merge(BuildOptionsSchema);\n\nexport function validateClientConfig(data: unknown) {\n  return MCPClientConfigSchema.parse(data);\n}\n\nexport function validateServerConfig(data: unknown) {\n  return GleanServerConfigSchema.parse(data);\n}\n\nexport function safeValidateClientConfig(data: unknown) {\n  return MCPClientConfigSchema.safeParse(data);\n}\n\nexport function safeValidateServerConfig(data: unknown) {\n  return GleanServerConfigSchema.safeParse(data);\n}\n\nexport const HttpServerConfigSchema = z.object({\n  type: z.literal('http'),\n  url: z.string().url(),\n});\n\nexport const StdioServerConfigSchema = z.object({\n  type: z.literal('stdio').optional(), // Some clients don't include type field\n  command: z.string(),\n  args: z.array(z.string()),\n  env: z.record(z.string(), z.string()).optional(),\n});\n\nexport const StdioServerConfigAltSchema = z.object({\n  type: z.literal('stdio').optional(),\n  cmd: z.string(), // Goose uses 'cmd' instead of 'command'\n  args: z.array(z.string()),\n  env: z.record(z.string(), z.string()).optional(),\n});\n\nexport const ServerConfigSchema = z.union([\n  HttpServerConfigSchema,\n  StdioServerConfigSchema,\n  StdioServerConfigAltSchema,\n]);\n\nexport const McpServersConfigSchema = z.object({\n  mcpServers: z.record(z.string(), ServerConfigSchema),\n});\n\nexport const VsCodeConfigSchema = z.object({\n  servers: z.record(z.string(), ServerConfigSchema),\n});\n\nexport const GooseServerConfigSchema = z.object({\n  name: z.string(),\n  cmd: z.string(),\n  args: z.array(z.union([z.string(), z.number()])),\n  type: z.literal('stdio'),\n  timeout: z.number(),\n  enabled: z.boolean(),\n  bundled: z.null(),\n  description: z.null(),\n  env_keys: z.array(z.string()),\n  envs: z.record(z.string(), z.string()),\n});\n\nexport const GooseConfigSchema = z.object({\n  extensions: z.record(z.string(), GooseServerConfigSchema),\n});\n\nexport function validateGeneratedConfig(\n  config: unknown,\n  clientId: string\n): { success: boolean; data?: unknown; error?: z.ZodError } {\n  let schema: z.ZodSchema;\n\n  switch (clientId) {\n    case 'vscode':\n      schema = VsCodeConfigSchema;\n      break;\n    case 'goose':\n      schema = GooseConfigSchema;\n      break;\n    case 'claude-code':\n    case 'claude-desktop':\n    case 'cursor':\n    case 'windsurf':\n      schema = McpServersConfigSchema;\n      break;\n    default:\n      return {\n        success: false,\n        error: new z.ZodError([\n          {\n            code: 'custom',\n            message: `Unknown client ID: ${clientId}`,\n            path: [],\n          },\n        ]),\n      };\n  }\n\n  const result = schema.safeParse(config);\n  if (result.success) {\n    return { success: true, data: result.data };\n  } else {\n    return { success: false, error: result.error };\n  }\n}\n\nexport const validateMcpServersConfig = McpServersConfigSchema.parse;\nexport const validateVsCodeConfig = VsCodeConfigSchema.parse;\nexport const validateGooseConfig = GooseConfigSchema.parse;\nexport const safeValidateMcpServersConfig = McpServersConfigSchema.safeParse;\nexport const safeValidateVsCodeConfig = VsCodeConfigSchema.safeParse;\nexport const safeValidateGooseConfig = GooseConfigSchema.safeParse;\n","/**\n * Canonical client IDs for MCP clients\n */\nexport const CLIENT = {\n  CLAUDE_CODE: 'claude-code',\n  CLAUDE_DESKTOP: 'claude-desktop',\n  CLAUDE_TEAMS_ENTERPRISE: 'claude-teams-enterprise',\n  CURSOR: 'cursor',\n  VSCODE: 'vscode',\n  WINDSURF: 'windsurf',\n  GOOSE: 'goose',\n  CHATGPT: 'chatgpt',\n} as const;\n\n/**\n * Display names for MCP clients\n */\nexport const CLIENT_DISPLAY_NAME = {\n  CLAUDE_CODE: 'Claude Code',\n  CLAUDE_DESKTOP: 'Claude for Desktop',\n  CLAUDE_TEAMS_ENTERPRISE: 'Claude for Teams/Enterprise',\n  CURSOR: 'Cursor',\n  VSCODE: 'VS Code',\n  WINDSURF: 'Windsurf',\n  GOOSE: 'Goose',\n  CHATGPT: 'ChatGPT',\n} as const;\n\n/**\n * Type-safe client ID type derived from the constants\n */\nexport type ClientIdConstant = (typeof CLIENT)[keyof typeof CLIENT];\n\n/**\n * Type-safe display name type derived from the constants\n */\nexport type ClientDisplayName = (typeof CLIENT_DISPLAY_NAME)[keyof typeof CLIENT_DISPLAY_NAME];\n\n/**\n * Helper to get display name from client ID\n */\nexport function getDisplayName(clientId: ClientIdConstant): ClientDisplayName {\n  const mapping: Record<ClientIdConstant, ClientDisplayName> = {\n    [CLIENT.CLAUDE_CODE]: CLIENT_DISPLAY_NAME.CLAUDE_CODE,\n    [CLIENT.CLAUDE_DESKTOP]: CLIENT_DISPLAY_NAME.CLAUDE_DESKTOP,\n    [CLIENT.CLAUDE_TEAMS_ENTERPRISE]: CLIENT_DISPLAY_NAME.CLAUDE_TEAMS_ENTERPRISE,\n    [CLIENT.CURSOR]: CLIENT_DISPLAY_NAME.CURSOR,\n    [CLIENT.VSCODE]: CLIENT_DISPLAY_NAME.VSCODE,\n    [CLIENT.WINDSURF]: CLIENT_DISPLAY_NAME.WINDSURF,\n    [CLIENT.GOOSE]: CLIENT_DISPLAY_NAME.GOOSE,\n    [CLIENT.CHATGPT]: CLIENT_DISPLAY_NAME.CHATGPT,\n  };\n  return mapping[clientId];\n}\n","/**\n * Centralized server name logic for MCP configurations\n */\n\n/**\n * Extracts the server name from a full MCP URL\n * e.g., https://my-be.glean.com/mcp/analytics -> analytics\n */\nexport function extractServerNameFromUrl(url: string): string | null {\n  const match = url.match(/\\/mcp\\/([^/]+)(?:\\/|$)/);\n  return match ? match[1] : null;\n}\n\n/**\n * Builds a consistent server name for MCP configurations\n *\n * Rules:\n * - Local mode: 'glean_local'\n * - Agents mode: 'glean_agents'\n * - Remote with URL ending in /mcp/default: 'glean_default' (for consistency)\n * - Remote with other URLs: 'glean_<extracted-name>'\n * - Fallback: 'glean'\n */\nexport function buildMcpServerName(options: {\n  mode?: 'local' | 'remote';\n  serverUrl?: string;\n  serverName?: string;\n  agents?: boolean;\n}): string {\n  // If explicit server name is provided, use it with prefix\n  if (options.serverName) {\n    // If it already starts with glean or glean_, don't double-prefix\n    if (options.serverName === 'glean' || options.serverName.startsWith('glean_')) {\n      return options.serverName;\n    }\n    return `glean_${options.serverName}`;\n  }\n\n  // Local mode\n  if (options.mode === 'local') {\n    return 'glean_local';\n  }\n\n  // Agents mode\n  if (options.agents) {\n    return 'glean_agents';\n  }\n\n  // Remote mode with URL\n  if (options.mode === 'remote' && options.serverUrl) {\n    const extracted = extractServerNameFromUrl(options.serverUrl);\n    if (extracted) {\n      // Consistent behavior: always prefix with glean_\n      return `glean_${extracted}`;\n    }\n  }\n\n  // Default fallback\n  return 'glean';\n}\n\n/**\n * Normalizes a server name to ensure consistency\n * This is useful when accepting user input that might not follow conventions\n */\nexport function normalizeServerName(name: string): string {\n  // Remove any existing glean prefix to avoid duplication\n  const withoutPrefix = name.replace(/^glean_?/i, '');\n\n  // If it's empty after removing prefix, return default\n  if (!withoutPrefix) {\n    return 'glean';\n  }\n\n  // Apply consistent formatting\n  return `glean_${withoutPrefix.toLowerCase()}`;\n}\n","import { MCPClientConfig, GleanServerConfig, Platform, validateServerConfig } from './types.js';\nimport { buildMcpServerName } from './server-name.js';\nimport * as yaml from 'js-yaml';\n\nfunction isNodeEnvironment(): boolean {\n  return (\n    typeof process !== 'undefined' &&\n    typeof process.versions !== 'undefined' &&\n    typeof process.versions.node !== 'undefined'\n  );\n}\n\nexport class ConfigBuilder {\n  private platform: Platform;\n\n  constructor(private config: MCPClientConfig) {\n    this.platform = this.detectPlatform();\n  }\n\n  private detectPlatform(): Platform {\n    if (isNodeEnvironment()) {\n      try {\n        return process.platform as Platform;\n      } catch {\n        // Ignore error and fall through to browser detection\n      }\n    }\n    if (typeof globalThis !== 'undefined' && 'navigator' in globalThis) {\n      const nav = (globalThis as Record<string, unknown>).navigator as { userAgent?: string };\n      if (nav && nav.userAgent) {\n        const ua = nav.userAgent.toLowerCase();\n        if (ua.includes('mac')) return 'darwin';\n        if (ua.includes('win')) return 'win32';\n        return 'linux';\n      }\n    }\n    return 'darwin';\n  }\n\n  buildConfiguration(gleanConfig: GleanServerConfig): string {\n    if (this.config.localConfigSupport === 'none') {\n      throw new Error(\n        `${this.config.displayName} does not support local configuration. ` +\n          `${this.config.localConfigNotes || 'Configuration must be done through other means.'}`\n      );\n    }\n\n    const validatedConfig = validateServerConfig(gleanConfig);\n    const includeWrapper = validatedConfig.includeWrapper !== false;\n\n    let configObj: Record<string, unknown> = {};\n\n    if (validatedConfig.mode === 'local') {\n      configObj = this.buildLocalConfig(validatedConfig, includeWrapper);\n    } else if (validatedConfig.mode === 'remote') {\n      configObj = this.buildRemoteConfig(validatedConfig, includeWrapper);\n    } else {\n      throw new Error(`Invalid server mode: ${validatedConfig.mode}`);\n    }\n\n    if (this.config.configFormat === 'json') {\n      return JSON.stringify(configObj, null, 2);\n    } else if (this.config.configFormat === 'yaml') {\n      return yaml.dump(configObj);\n    }\n\n    throw new Error(`Unsupported config format: ${this.config.configFormat}`);\n  }\n\n  private buildLocalConfig(\n    gleanConfig: GleanServerConfig,\n    includeWrapper: boolean = true\n  ): Record<string, unknown> {\n    const { serverKey, stdioConfig } = this.config.configStructure;\n\n    if (!stdioConfig) {\n      throw new Error(`Client ${this.config.id} doesn't support local server configuration`);\n    }\n\n    const serverName = buildMcpServerName({\n      mode: 'local',\n      serverName: gleanConfig.serverName,\n    });\n    const serverConfig: Record<string, unknown> = {};\n\n    serverConfig[stdioConfig.commandField] = 'npx';\n    serverConfig[stdioConfig.argsField] = ['-y', '@gleanwork/local-mcp-server'];\n\n    if (stdioConfig.typeField) {\n      serverConfig[stdioConfig.typeField] = 'stdio';\n    }\n\n    if (stdioConfig.envField) {\n      const env: Record<string, string> = {};\n\n      if (gleanConfig.instance) {\n        if (\n          gleanConfig.instance.startsWith('http://') ||\n          gleanConfig.instance.startsWith('https://')\n        ) {\n          env.GLEAN_URL = gleanConfig.instance;\n        } else {\n          env.GLEAN_INSTANCE = gleanConfig.instance;\n        }\n      }\n\n      if (gleanConfig.apiToken) {\n        env.GLEAN_API_TOKEN = gleanConfig.apiToken;\n      }\n\n      if (Object.keys(env).length > 0) {\n        serverConfig[stdioConfig.envField] = env;\n      }\n    }\n\n    if (this.config.id === 'goose') {\n      // Goose uses 'envs' field directly, not through stdioConfig.envField\n      const envs: Record<string, string> = {};\n\n      if (gleanConfig.instance) {\n        if (\n          gleanConfig.instance.startsWith('http://') ||\n          gleanConfig.instance.startsWith('https://')\n        ) {\n          envs.GLEAN_URL = gleanConfig.instance;\n        } else {\n          envs.GLEAN_INSTANCE = gleanConfig.instance;\n        }\n      }\n\n      if (gleanConfig.apiToken) {\n        envs.GLEAN_API_TOKEN = gleanConfig.apiToken;\n      }\n\n      const gooseServerConfig = {\n        name: serverName,\n        ...serverConfig,\n        type: 'stdio',\n        timeout: 300,\n        enabled: true,\n        bundled: null,\n        description: null,\n        env_keys: [],\n        envs: envs,\n      };\n\n      if (!includeWrapper) {\n        return {\n          [serverName]: gooseServerConfig,\n        };\n      }\n\n      return {\n        extensions: {\n          [serverName]: gooseServerConfig,\n        },\n      };\n    }\n\n    if (!includeWrapper) {\n      return {\n        [serverName]: serverConfig,\n      };\n    }\n\n    return {\n      [serverKey]: {\n        [serverName]: serverConfig,\n      },\n    };\n  }\n\n  private buildRemoteConfig(\n    gleanConfig: GleanServerConfig,\n    includeWrapper: boolean = true\n  ): Record<string, unknown> {\n    if (!gleanConfig.serverUrl) {\n      throw new Error('Remote configuration requires serverUrl');\n    }\n\n    const { serverKey, httpConfig, stdioConfig } = this.config.configStructure;\n\n    const serverName = buildMcpServerName({\n      mode: 'remote',\n      serverUrl: gleanConfig.serverUrl,\n      serverName: gleanConfig.serverName,\n    });\n\n    if (\n      httpConfig &&\n      (this.config.clientSupports === 'http' || this.config.clientSupports === 'both')\n    ) {\n      const serverConfig: Record<string, unknown> = {};\n\n      if (httpConfig.typeField) {\n        serverConfig[httpConfig.typeField] = 'http';\n      }\n\n      serverConfig[httpConfig.urlField] = gleanConfig.serverUrl;\n\n      if (!includeWrapper) {\n        return {\n          [serverName]: serverConfig,\n        };\n      }\n\n      return {\n        [serverKey]: {\n          [serverName]: serverConfig,\n        },\n      };\n    } else if (stdioConfig) {\n      const serverConfig: Record<string, unknown> = {};\n\n      if (stdioConfig.typeField) {\n        serverConfig[stdioConfig.typeField] = 'stdio';\n      }\n\n      serverConfig[stdioConfig.commandField] = 'npx';\n      serverConfig[stdioConfig.argsField] = ['-y', 'mcp-remote', gleanConfig.serverUrl];\n\n      if (this.config.id === 'goose') {\n        const gooseServerConfig = {\n          name: serverName,\n          ...serverConfig,\n          type: 'stdio',\n          timeout: 300,\n          enabled: true,\n          bundled: null,\n          description: null,\n          env_keys: [],\n          envs: {},\n        };\n\n        if (!includeWrapper) {\n          return {\n            [serverName]: gooseServerConfig,\n          };\n        }\n\n        return {\n          extensions: {\n            [serverName]: gooseServerConfig,\n          },\n        };\n      }\n\n      if (!includeWrapper) {\n        return {\n          [serverName]: serverConfig,\n        };\n      }\n\n      return {\n        [serverKey]: {\n          [serverName]: serverConfig,\n        },\n      };\n    } else {\n      throw new Error(`Client ${this.config.id} doesn't support remote server configuration`);\n    }\n  }\n\n  buildOneClickUrl(gleanConfig: GleanServerConfig): string {\n    if (!this.config.oneClick) {\n      throw new Error(`${this.config.displayName} does not support one-click installation`);\n    }\n\n    const serverName = buildMcpServerName({\n      mode: gleanConfig.mode,\n      serverUrl: gleanConfig.serverUrl,\n      serverName: gleanConfig.serverName,\n    });\n\n    // Build the appropriate config based on the client's capabilities\n    let configObj: Record<string, unknown>;\n\n    if (this.config.clientSupports === 'stdio-only' && gleanConfig.mode === 'remote') {\n      // stdio-only clients need mcp-remote for remote servers\n      configObj = {\n        command: 'npx',\n        args: ['-y', 'mcp-remote', gleanConfig.serverUrl],\n      };\n    } else if (this.config.clientSupports === 'http' && gleanConfig.mode === 'remote') {\n      // HTTP clients can connect directly\n      configObj = {\n        url: gleanConfig.serverUrl,\n      };\n    } else if (gleanConfig.mode === 'local') {\n      // Local mode\n      configObj = {\n        command: 'npx',\n        args: ['-y', '@gleanwork/local-mcp-server'],\n      };\n    } else {\n      configObj = {\n        command: 'npx',\n        args: ['-y', 'mcp-remote', gleanConfig.serverUrl],\n      };\n    }\n\n    // Encode the config based on the format\n    let encodedConfig: string;\n    if (this.config.oneClick.configFormat === 'base64-json') {\n      encodedConfig = Buffer.from(JSON.stringify(configObj)).toString('base64');\n    } else if (this.config.oneClick.configFormat === 'url-encoded-json') {\n      encodedConfig = encodeURIComponent(JSON.stringify(configObj));\n    } else {\n      throw new Error(`Unknown one-click config format: ${this.config.oneClick.configFormat}`);\n    }\n\n    // Replace placeholders in the template\n    return this.config.oneClick.urlTemplate\n      .replace('{{name}}', encodeURIComponent(serverName))\n      .replace('{{config}}', encodedConfig);\n  }\n\n  getConfigPath(): string {\n    if (!isNodeEnvironment()) {\n      throw new Error('getConfigPath() is only available in Node.js environment');\n    }\n\n    if (this.config.localConfigSupport === 'none') {\n      throw new Error(\n        `${this.config.displayName} does not support local configuration. ` +\n          `${this.config.localConfigNotes || 'Configuration must be done through other means.'}`\n      );\n    }\n\n    const platformPath = this.config.configPath[this.platform];\n    if (!platformPath) {\n      throw new Error(`Platform ${this.platform} not supported for ${this.config.displayName}`);\n    }\n\n    return this.expandPath(platformPath);\n  }\n\n  private expandPath(filepath: string): string {\n    const homedir = process.env.HOME || process.env.USERPROFILE || '';\n    const sep = process.platform === 'win32' ? '\\\\' : '/';\n\n    filepath = filepath.replace(/\\$HOME/g, homedir);\n\n    if (filepath.startsWith('~')) {\n      filepath =\n        homedir +\n        (filepath.startsWith('~/') || filepath.startsWith('~\\\\') ? '' : sep) +\n        filepath.slice(1);\n    }\n\n    filepath = filepath.replace(/%([^%]+)%/g, (_, envVar) => {\n      return process.env[envVar] || '';\n    });\n\n    return filepath;\n  }\n\n  async writeConfiguration(gleanConfig: GleanServerConfig): Promise<void> {\n    if (!isNodeEnvironment()) {\n      throw new Error('writeConfiguration() is only available in Node.js environment');\n    }\n\n    if (this.config.localConfigSupport === 'none') {\n      throw new Error(\n        `${this.config.displayName} does not support local configuration. ` +\n          `${this.config.localConfigNotes || 'Configuration must be done through other means.'}`\n      );\n    }\n\n    const content = this.buildConfiguration(gleanConfig);\n    const configPath = this.getConfigPath();\n\n    const fs = await import('fs');\n    const path = await import('path');\n    const { mkdirp } = await import('mkdirp');\n    const chalk = await import('chalk');\n\n    await mkdirp(path.dirname(configPath));\n\n    if (fs.existsSync(configPath)) {\n      const backupPath = `${configPath}.backup.${Date.now()}`;\n      fs.copyFileSync(configPath, backupPath);\n      console.log(chalk.default.yellow(`📁 Backed up existing config to: ${backupPath}`));\n    }\n\n    fs.writeFileSync(configPath, content, 'utf-8');\n    console.log(chalk.default.green(`✅ Configuration written to: ${configPath}`));\n\n    if (this.config.requiresMcpRemoteForHttp && gleanConfig.mode === 'remote') {\n      console.log(\n        chalk.default.blue('\\nℹ️  This client uses mcp-remote to connect to HTTP servers.')\n      );\n      console.log(chalk.default.blue('   Make sure mcp-remote is available via npx.'));\n    }\n  }\n}\n","{\n  \"id\": \"chatgpt\",\n  \"name\": \"chatgpt\",\n  \"displayName\": \"ChatGPT\",\n  \"description\": \"ChatGPT web interface - requires GPT configuration through web UI\",\n  \"localConfigSupport\": \"none\",\n  \"localConfigNotes\": \"ChatGPT is web-based and requires creating custom GPTs through their web UI. No local configuration file support.\",\n  \"clientSupports\": \"stdio-only\",\n  \"requiresMcpRemoteForHttp\": true,\n  \"supportedPlatforms\": [],\n  \"configFormat\": \"json\",\n  \"configPath\": {},\n  \"documentationUrl\": \"https://platform.openai.com/docs\",\n  \"configStructure\": {\n    \"serverKey\": \"\"\n  }\n}\n","{\n  \"id\": \"claude-code\",\n  \"name\": \"claude-code\",\n  \"displayName\": \"Claude Code\",\n  \"description\": \"Claude Code with native HTTP support\",\n  \"localConfigSupport\": \"full\",\n  \"documentationUrl\": \"https://docs.anthropic.com/en/docs/claude-code\",\n  \"clientSupports\": \"http\",\n  \"requiresMcpRemoteForHttp\": false,\n  \"supportedPlatforms\": [\"darwin\", \"linux\", \"win32\"],\n  \"configFormat\": \"json\",\n  \"configPath\": {\n    \"darwin\": \"$HOME/.claude.json\",\n    \"linux\": \"$HOME/.claude.json\",\n    \"win32\": \"%USERPROFILE%\\\\.claude.json\"\n  },\n  \"configStructure\": {\n    \"serverKey\": \"mcpServers\",\n    \"httpConfig\": {\n      \"typeField\": \"type\",\n      \"urlField\": \"url\"\n    },\n    \"stdioConfig\": {\n      \"typeField\": \"type\",\n      \"commandField\": \"command\",\n      \"argsField\": \"args\",\n      \"envField\": \"env\"\n    }\n  }\n}\n","{\n  \"id\": \"claude-desktop\",\n  \"name\": \"claude-desktop\",\n  \"displayName\": \"Claude for Desktop\",\n  \"description\": \"Claude Desktop only supports stdio, requires mcp-remote for HTTP servers\",\n  \"localConfigSupport\": \"full\",\n  \"localConfigNotes\": \"Requires mcp-remote for remote servers\",\n  \"documentationUrl\": \"https://docs.anthropic.com/en/docs/claude-desktop\",\n  \"clientSupports\": \"stdio-only\",\n  \"requiresMcpRemoteForHttp\": true,\n  \"supportedPlatforms\": [\"darwin\", \"win32\", \"linux\"],\n  \"configFormat\": \"json\",\n  \"configPath\": {\n    \"darwin\": \"$HOME/Library/Application Support/Claude/claude_desktop_config.json\",\n    \"win32\": \"%APPDATA%\\\\Claude\\\\claude_desktop_config.json\",\n    \"linux\": \"$HOME/.config/Claude/claude_desktop_config.json\"\n  },\n  \"configStructure\": {\n    \"serverKey\": \"mcpServers\",\n    \"stdioConfig\": {\n      \"typeField\": \"type\",\n      \"commandField\": \"command\",\n      \"argsField\": \"args\",\n      \"envField\": \"env\"\n    }\n  }\n}\n","{\n  \"id\": \"claude-teams-enterprise\",\n  \"name\": \"claude-teams-enterprise\",\n  \"displayName\": \"Claude for Teams/Enterprise\",\n  \"description\": \"Claude for Teams and Enterprise\",\n  \"localConfigSupport\": \"none\",\n  \"localConfigNotes\": \"MCP servers are centrally managed by admins. No local configuration support - servers must be configured at the organization level.\",\n  \"clientSupports\": \"stdio-only\",\n  \"requiresMcpRemoteForHttp\": true,\n  \"supportedPlatforms\": [],\n  \"configFormat\": \"json\",\n  \"configPath\": {},\n  \"documentationUrl\": \"https://docs.anthropic.com/en/docs/claude-desktop\",\n  \"configStructure\": {\n    \"serverKey\": \"\"\n  }\n}\n","{\n  \"id\": \"cursor\",\n  \"name\": \"cursor\",\n  \"displayName\": \"Cursor\",\n  \"description\": \"Cursor with native HTTP support\",\n  \"localConfigSupport\": \"full\",\n  \"documentationUrl\": \"https://docs.cursor.com/context/model-context-protocol\",\n  \"clientSupports\": \"http\",\n  \"requiresMcpRemoteForHttp\": false,\n  \"supportedPlatforms\": [\"darwin\", \"linux\", \"win32\"],\n  \"configFormat\": \"json\",\n  \"configPath\": {\n    \"darwin\": \"$HOME/.cursor/mcp.json\",\n    \"linux\": \"$HOME/.cursor/mcp.json\",\n    \"win32\": \"%USERPROFILE%\\\\.cursor\\\\mcp.json\"\n  },\n  \"oneClick\": {\n    \"protocol\": \"cursor://\",\n    \"urlTemplate\": \"cursor://anysphere.cursor-deeplink/mcp/install?name={{name}}&config={{config}}\",\n    \"configFormat\": \"base64-json\"\n  },\n  \"configStructure\": {\n    \"serverKey\": \"mcpServers\",\n    \"httpConfig\": {\n      \"typeField\": \"type\",\n      \"urlField\": \"url\"\n    },\n    \"stdioConfig\": {\n      \"typeField\": \"type\",\n      \"commandField\": \"command\",\n      \"argsField\": \"args\",\n      \"envField\": \"env\"\n    }\n  }\n}\n","{\n  \"id\": \"goose\",\n  \"name\": \"goose\",\n  \"displayName\": \"Goose\",\n  \"description\": \"Goose only supports stdio, requires mcp-remote for HTTP servers\",\n  \"localConfigSupport\": \"full\",\n  \"localConfigNotes\": \"Requires mcp-remote for remote servers\",\n  \"documentationUrl\": \"https://github.com/square/goose\",\n  \"clientSupports\": \"stdio-only\",\n  \"requiresMcpRemoteForHttp\": true,\n  \"supportedPlatforms\": [\"darwin\", \"linux\", \"win32\"],\n  \"configFormat\": \"yaml\",\n  \"configPath\": {\n    \"darwin\": \"$HOME/.config/goose/config.yaml\",\n    \"linux\": \"$HOME/.config/goose/config.yaml\",\n    \"win32\": \"%USERPROFILE%\\\\.config\\\\goose\\\\config.yaml\"\n  },\n  \"configStructure\": {\n    \"serverKey\": \"extensions\",\n    \"stdioConfig\": {\n      \"commandField\": \"cmd\",\n      \"argsField\": \"args\"\n    }\n  }\n}\n","{\n  \"id\": \"vscode\",\n  \"name\": \"vscode\",\n  \"displayName\": \"Visual Studio Code\",\n  \"description\": \"VS Code with native HTTP support\",\n  \"localConfigSupport\": \"full\",\n  \"documentationUrl\": \"https://code.visualstudio.com/docs\",\n  \"clientSupports\": \"http\",\n  \"requiresMcpRemoteForHttp\": false,\n  \"supportedPlatforms\": [\"darwin\", \"linux\", \"win32\"],\n  \"configFormat\": \"json\",\n  \"configPath\": {\n    \"darwin\": \"$HOME/Library/Application Support/Code/User/mcp.json\",\n    \"linux\": \"$HOME/.config/Code/User/mcp.json\",\n    \"win32\": \"%APPDATA%\\\\Code\\\\User\\\\mcp.json\"\n  },\n  \"configStructure\": {\n    \"serverKey\": \"servers\",\n    \"httpConfig\": {\n      \"typeField\": \"type\",\n      \"urlField\": \"url\"\n    },\n    \"stdioConfig\": {\n      \"typeField\": \"type\",\n      \"commandField\": \"command\",\n      \"argsField\": \"args\",\n      \"envField\": \"env\"\n    }\n  }\n}\n","{\n  \"id\": \"windsurf\",\n  \"name\": \"windsurf\",\n  \"displayName\": \"Windsurf\",\n  \"description\": \"Windsurf only supports stdio, requires mcp-remote for HTTP servers\",\n  \"localConfigSupport\": \"full\",\n  \"localConfigNotes\": \"Requires mcp-remote for remote servers\",\n  \"documentationUrl\": \"https://docs.codeium.com/windsurf\",\n  \"clientSupports\": \"stdio-only\",\n  \"requiresMcpRemoteForHttp\": true,\n  \"supportedPlatforms\": [\"darwin\", \"linux\", \"win32\"],\n  \"configFormat\": \"json\",\n  \"configPath\": {\n    \"darwin\": \"$HOME/.codeium/windsurf/mcp_config.json\",\n    \"linux\": \"$HOME/.codeium/windsurf/mcp_config.json\",\n    \"win32\": \"%USERPROFILE%\\\\.codeium\\\\windsurf\\\\mcp_config.json\"\n  },\n  \"configStructure\": {\n    \"serverKey\": \"mcpServers\",\n    \"stdioConfig\": {\n      \"commandField\": \"command\",\n      \"argsField\": \"args\",\n      \"envField\": \"env\"\n    }\n  }\n}\n","import { MCPClientConfig, ClientId, Platform, safeValidateClientConfig } from './types.js';\nimport { ConfigBuilder } from './builder.js';\nimport chatgptConfig from '../configs/chatgpt.json';\nimport claudeCodeConfig from '../configs/claude-code.json';\nimport claudeDesktopConfig from '../configs/claude-desktop.json';\nimport claudeTeamsEnterpriseConfig from '../configs/claude-teams-enterprise.json';\nimport cursorConfig from '../configs/cursor.json';\nimport gooseConfig from '../configs/goose.json';\nimport vscodeConfig from '../configs/vscode.json';\nimport windsurfConfig from '../configs/windsurf.json';\nconst allConfigs = [\n  chatgptConfig,\n  claudeCodeConfig,\n  claudeDesktopConfig,\n  claudeTeamsEnterpriseConfig,\n  cursorConfig,\n  gooseConfig,\n  vscodeConfig,\n  windsurfConfig,\n];\n\nexport class MCPConfigRegistry {\n  private configs: Map<ClientId, MCPClientConfig> = new Map();\n\n  constructor() {\n    this.loadConfigs();\n  }\n\n  private loadConfigs(): void {\n    for (const data of allConfigs) {\n      try {\n        const result = safeValidateClientConfig(data);\n\n        if (!result.success) {\n          const errorMessage = result.error.issues\n            .map((err) => `  - ${err.path.join('.')}: ${err.message}`)\n            .join('\\n');\n          throw new Error(`Validation failed:\\n${errorMessage}`);\n        }\n\n        const config = result.data;\n        this.validateBusinessRules(config);\n\n        this.configs.set(config.id, config);\n      } catch (error) {\n        const configId = (data as Record<string, unknown>).id || 'unknown';\n        if (error instanceof Error) {\n          console.error(`Failed to load config ${configId}:\\n${error.message}`);\n        } else {\n          console.error(`Failed to load config ${configId}:`, error);\n        }\n      }\n    }\n  }\n\n  private validateBusinessRules(config: MCPClientConfig): void {\n    if (config.localConfigSupport === 'none') {\n      return;\n    }\n    if (config.clientSupports === 'stdio-only' && !config.requiresMcpRemoteForHttp) {\n      throw new Error(`stdio-only clients must require mcp-remote for HTTP servers`);\n    }\n    if (config.clientSupports === 'http' && config.requiresMcpRemoteForHttp) {\n      throw new Error(`HTTP-supporting clients shouldn't require mcp-remote`);\n    }\n    if (!config.configStructure.httpConfig && !config.configStructure.stdioConfig) {\n      throw new Error(`Client must support at least one configuration type (http or stdio)`);\n    }\n\n    // Business rule: HTTP support requires httpConfig\n    if (\n      (config.clientSupports === 'http' || config.clientSupports === 'both') &&\n      !config.configStructure.httpConfig\n    ) {\n      throw new Error(`Client with HTTP support must have httpConfig defined`);\n    }\n  }\n\n  getConfig(clientId: ClientId): MCPClientConfig | undefined {\n    return this.configs.get(clientId);\n  }\n\n  getAllConfigs(): MCPClientConfig[] {\n    return Array.from(this.configs.values());\n  }\n\n  getNativeHttpClients(): MCPClientConfig[] {\n    return this.getAllConfigs().filter(\n      (config) => config.clientSupports === 'http' || config.clientSupports === 'both'\n    );\n  }\n\n  getBridgeRequiredClients(): MCPClientConfig[] {\n    return this.getAllConfigs().filter((config) => config.requiresMcpRemoteForHttp === true);\n  }\n\n  getStdioOnlyClients(): MCPClientConfig[] {\n    return this.getAllConfigs().filter((config) => config.clientSupports === 'stdio-only');\n  }\n\n  getClientsWithOneClick(): MCPClientConfig[] {\n    return this.getAllConfigs().filter((config) => config.oneClick !== undefined);\n  }\n\n  getSupportedClients(): MCPClientConfig[] {\n    return this.getAllConfigs().filter((config) => config.localConfigSupport === 'full');\n  }\n\n  getClientsByPlatform(platform: Platform): MCPClientConfig[] {\n    return this.getAllConfigs().filter((config) => config.supportedPlatforms.includes(platform));\n  }\n\n  getUnsupportedClients(): MCPClientConfig[] {\n    return this.getAllConfigs().filter((config) => config.localConfigSupport === 'none');\n  }\n\n  createBuilder(clientId: ClientId): ConfigBuilder {\n    const config = this.getConfig(clientId);\n    if (!config) {\n      throw new Error(`Unknown client: ${clientId}`);\n    }\n    if (config.localConfigSupport === 'none') {\n      throw new Error(\n        `Cannot create builder for ${config.displayName}: ${config.localConfigNotes || 'No local configuration support.'}`\n      );\n    }\n    return new ConfigBuilder(config);\n  }\n}\n"],"mappings":"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","names":[]}