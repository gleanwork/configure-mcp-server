import { z } from 'zod';

declare const PlatformSchema: z.ZodEnum<{
    darwin: "darwin";
    linux: "linux";
    win32: "win32";
}>;
declare const ClientIdSchema: z.ZodEnum<{
    "claude-code": "claude-code";
    vscode: "vscode";
    "claude-desktop": "claude-desktop";
    "claude-teams-enterprise": "claude-teams-enterprise";
    cursor: "cursor";
    goose: "goose";
    windsurf: "windsurf";
    chatgpt: "chatgpt";
}>;
declare const ClientConnectionSupportSchema: z.ZodEnum<{
    http: "http";
    "stdio-only": "stdio-only";
    both: "both";
}>;
declare const ServerTypeSchema: z.ZodEnum<{
    http: "http";
    stdio: "stdio";
}>;
declare const LocalConfigSupportSchema: z.ZodEnum<{
    full: "full";
    none: "none";
}>;
declare const ServerModeSchema: z.ZodEnum<{
    local: "local";
    remote: "remote";
}>;
declare const HttpConfigStructureSchema: z.ZodObject<{
    typeField: z.ZodOptional<z.ZodString>;
    urlField: z.ZodString;
}, z.core.$strip>;
declare const StdioConfigStructureSchema: z.ZodObject<{
    typeField: z.ZodOptional<z.ZodString>;
    commandField: z.ZodString;
    argsField: z.ZodString;
    envField: z.ZodOptional<z.ZodString>;
}, z.core.$strip>;
declare const ConfigStructureSchema: z.ZodObject<{
    serverKey: z.ZodString;
    httpConfig: z.ZodOptional<z.ZodObject<{
        typeField: z.ZodOptional<z.ZodString>;
        urlField: z.ZodString;
    }, z.core.$strip>>;
    stdioConfig: z.ZodOptional<z.ZodObject<{
        typeField: z.ZodOptional<z.ZodString>;
        commandField: z.ZodString;
        argsField: z.ZodString;
        envField: z.ZodOptional<z.ZodString>;
    }, z.core.$strip>>;
}, z.core.$strip>;
declare const PlatformPathsSchema: z.ZodObject<{
    darwin: z.ZodOptional<z.ZodString>;
    linux: z.ZodOptional<z.ZodString>;
    win32: z.ZodOptional<z.ZodString>;
}, z.core.$strip>;
declare const MCPClientConfigSchema: z.ZodObject<{
    id: z.ZodEnum<{
        "claude-code": "claude-code";
        vscode: "vscode";
        "claude-desktop": "claude-desktop";
        "claude-teams-enterprise": "claude-teams-enterprise";
        cursor: "cursor";
        goose: "goose";
        windsurf: "windsurf";
        chatgpt: "chatgpt";
    }>;
    name: z.ZodString;
    displayName: z.ZodString;
    description: z.ZodString;
    localConfigSupport: z.ZodEnum<{
        full: "full";
        none: "none";
    }>;
    localConfigNotes: z.ZodOptional<z.ZodString>;
    documentationUrl: z.ZodOptional<z.ZodString>;
    clientSupports: z.ZodEnum<{
        http: "http";
        "stdio-only": "stdio-only";
        both: "both";
    }>;
    requiresMcpRemoteForHttp: z.ZodBoolean;
    supportedPlatforms: z.ZodArray<z.ZodEnum<{
        darwin: "darwin";
        linux: "linux";
        win32: "win32";
    }>>;
    configFormat: z.ZodEnum<{
        json: "json";
        yaml: "yaml";
    }>;
    configPath: z.ZodObject<{
        darwin: z.ZodOptional<z.ZodString>;
        linux: z.ZodOptional<z.ZodString>;
        win32: z.ZodOptional<z.ZodString>;
    }, z.core.$strip>;
    oneClick: z.ZodOptional<z.ZodObject<{
        protocol: z.ZodString;
        urlTemplate: z.ZodString;
        configFormat: z.ZodEnum<{
            "base64-json": "base64-json";
            "url-encoded-json": "url-encoded-json";
        }>;
    }, z.core.$strip>>;
    configStructure: z.ZodObject<{
        serverKey: z.ZodString;
        httpConfig: z.ZodOptional<z.ZodObject<{
            typeField: z.ZodOptional<z.ZodString>;
            urlField: z.ZodString;
        }, z.core.$strip>>;
        stdioConfig: z.ZodOptional<z.ZodObject<{
            typeField: z.ZodOptional<z.ZodString>;
            commandField: z.ZodString;
            argsField: z.ZodString;
            envField: z.ZodOptional<z.ZodString>;
        }, z.core.$strip>>;
    }, z.core.$strip>;
    securityNotes: z.ZodOptional<z.ZodString>;
}, z.core.$strip>;
declare const BuildOptionsSchema: z.ZodObject<{
    includeWrapper: z.ZodOptional<z.ZodBoolean>;
}, z.core.$strip>;
declare const GleanServerConfigSchema: z.ZodObject<{
    mode: z.ZodEnum<{
        local: "local";
        remote: "remote";
    }>;
    serverUrl: z.ZodOptional<z.ZodString>;
    serverName: z.ZodOptional<z.ZodString>;
    instance: z.ZodOptional<z.ZodString>;
    apiToken: z.ZodOptional<z.ZodString>;
    includeWrapper: z.ZodOptional<z.ZodBoolean>;
}, z.core.$strip>;
declare function validateClientConfig(data: unknown): {
    id: "claude-code" | "vscode" | "claude-desktop" | "claude-teams-enterprise" | "cursor" | "goose" | "windsurf" | "chatgpt";
    name: string;
    displayName: string;
    description: string;
    localConfigSupport: "full" | "none";
    clientSupports: "http" | "stdio-only" | "both";
    requiresMcpRemoteForHttp: boolean;
    supportedPlatforms: ("darwin" | "linux" | "win32")[];
    configFormat: "json" | "yaml";
    configPath: {
        darwin?: string | undefined;
        linux?: string | undefined;
        win32?: string | undefined;
    };
    configStructure: {
        serverKey: string;
        httpConfig?: {
            urlField: string;
            typeField?: string | undefined;
        } | undefined;
        stdioConfig?: {
            commandField: string;
            argsField: string;
            typeField?: string | undefined;
            envField?: string | undefined;
        } | undefined;
    };
    localConfigNotes?: string | undefined;
    documentationUrl?: string | undefined;
    oneClick?: {
        protocol: string;
        urlTemplate: string;
        configFormat: "base64-json" | "url-encoded-json";
    } | undefined;
    securityNotes?: string | undefined;
};
declare function validateServerConfig(data: unknown): {
    mode: "local" | "remote";
    serverUrl?: string | undefined;
    serverName?: string | undefined;
    instance?: string | undefined;
    apiToken?: string | undefined;
    includeWrapper?: boolean | undefined;
};
declare function safeValidateClientConfig(data: unknown): z.ZodSafeParseResult<{
    id: "claude-code" | "vscode" | "claude-desktop" | "claude-teams-enterprise" | "cursor" | "goose" | "windsurf" | "chatgpt";
    name: string;
    displayName: string;
    description: string;
    localConfigSupport: "full" | "none";
    clientSupports: "http" | "stdio-only" | "both";
    requiresMcpRemoteForHttp: boolean;
    supportedPlatforms: ("darwin" | "linux" | "win32")[];
    configFormat: "json" | "yaml";
    configPath: {
        darwin?: string | undefined;
        linux?: string | undefined;
        win32?: string | undefined;
    };
    configStructure: {
        serverKey: string;
        httpConfig?: {
            urlField: string;
            typeField?: string | undefined;
        } | undefined;
        stdioConfig?: {
            commandField: string;
            argsField: string;
            typeField?: string | undefined;
            envField?: string | undefined;
        } | undefined;
    };
    localConfigNotes?: string | undefined;
    documentationUrl?: string | undefined;
    oneClick?: {
        protocol: string;
        urlTemplate: string;
        configFormat: "base64-json" | "url-encoded-json";
    } | undefined;
    securityNotes?: string | undefined;
}>;
declare function safeValidateServerConfig(data: unknown): z.ZodSafeParseResult<{
    mode: "local" | "remote";
    serverUrl?: string | undefined;
    serverName?: string | undefined;
    instance?: string | undefined;
    apiToken?: string | undefined;
    includeWrapper?: boolean | undefined;
}>;
declare const HttpServerConfigSchema: z.ZodObject<{
    type: z.ZodLiteral<"http">;
    url: z.ZodString;
}, z.core.$strip>;
declare const StdioServerConfigSchema: z.ZodObject<{
    type: z.ZodOptional<z.ZodLiteral<"stdio">>;
    command: z.ZodString;
    args: z.ZodArray<z.ZodString>;
    env: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
}, z.core.$strip>;
declare const StdioServerConfigAltSchema: z.ZodObject<{
    type: z.ZodOptional<z.ZodLiteral<"stdio">>;
    cmd: z.ZodString;
    args: z.ZodArray<z.ZodString>;
    env: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
}, z.core.$strip>;
declare const ServerConfigSchema: z.ZodUnion<readonly [z.ZodObject<{
    type: z.ZodLiteral<"http">;
    url: z.ZodString;
}, z.core.$strip>, z.ZodObject<{
    type: z.ZodOptional<z.ZodLiteral<"stdio">>;
    command: z.ZodString;
    args: z.ZodArray<z.ZodString>;
    env: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
}, z.core.$strip>, z.ZodObject<{
    type: z.ZodOptional<z.ZodLiteral<"stdio">>;
    cmd: z.ZodString;
    args: z.ZodArray<z.ZodString>;
    env: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
}, z.core.$strip>]>;
declare const McpServersConfigSchema: z.ZodObject<{
    mcpServers: z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodObject<{
        type: z.ZodLiteral<"http">;
        url: z.ZodString;
    }, z.core.$strip>, z.ZodObject<{
        type: z.ZodOptional<z.ZodLiteral<"stdio">>;
        command: z.ZodString;
        args: z.ZodArray<z.ZodString>;
        env: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, z.core.$strip>, z.ZodObject<{
        type: z.ZodOptional<z.ZodLiteral<"stdio">>;
        cmd: z.ZodString;
        args: z.ZodArray<z.ZodString>;
        env: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, z.core.$strip>]>>;
}, z.core.$strip>;
declare const VsCodeConfigSchema: z.ZodObject<{
    servers: z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodObject<{
        type: z.ZodLiteral<"http">;
        url: z.ZodString;
    }, z.core.$strip>, z.ZodObject<{
        type: z.ZodOptional<z.ZodLiteral<"stdio">>;
        command: z.ZodString;
        args: z.ZodArray<z.ZodString>;
        env: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, z.core.$strip>, z.ZodObject<{
        type: z.ZodOptional<z.ZodLiteral<"stdio">>;
        cmd: z.ZodString;
        args: z.ZodArray<z.ZodString>;
        env: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, z.core.$strip>]>>;
}, z.core.$strip>;
declare const GooseServerConfigSchema: z.ZodObject<{
    name: z.ZodString;
    cmd: z.ZodString;
    args: z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
    type: z.ZodLiteral<"stdio">;
    timeout: z.ZodNumber;
    enabled: z.ZodBoolean;
    bundled: z.ZodNull;
    description: z.ZodNull;
    env_keys: z.ZodArray<z.ZodString>;
    envs: z.ZodRecord<z.ZodString, z.ZodString>;
}, z.core.$strip>;
declare const GooseConfigSchema: z.ZodObject<{
    extensions: z.ZodRecord<z.ZodString, z.ZodObject<{
        name: z.ZodString;
        cmd: z.ZodString;
        args: z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
        type: z.ZodLiteral<"stdio">;
        timeout: z.ZodNumber;
        enabled: z.ZodBoolean;
        bundled: z.ZodNull;
        description: z.ZodNull;
        env_keys: z.ZodArray<z.ZodString>;
        envs: z.ZodRecord<z.ZodString, z.ZodString>;
    }, z.core.$strip>>;
}, z.core.$strip>;
declare function validateGeneratedConfig(config: unknown, clientId: string): {
    success: boolean;
    data?: unknown;
    error?: z.ZodError;
};
declare const validateMcpServersConfig: (data: unknown, params?: z.core.ParseContext<z.core.$ZodIssue>) => {
    mcpServers: Record<string, {
        type: "http";
        url: string;
    } | {
        command: string;
        args: string[];
        type?: "stdio" | undefined;
        env?: Record<string, string> | undefined;
    } | {
        cmd: string;
        args: string[];
        type?: "stdio" | undefined;
        env?: Record<string, string> | undefined;
    }>;
};
declare const validateVsCodeConfig: (data: unknown, params?: z.core.ParseContext<z.core.$ZodIssue>) => {
    servers: Record<string, {
        type: "http";
        url: string;
    } | {
        command: string;
        args: string[];
        type?: "stdio" | undefined;
        env?: Record<string, string> | undefined;
    } | {
        cmd: string;
        args: string[];
        type?: "stdio" | undefined;
        env?: Record<string, string> | undefined;
    }>;
};
declare const validateGooseConfig: (data: unknown, params?: z.core.ParseContext<z.core.$ZodIssue>) => {
    extensions: Record<string, {
        name: string;
        cmd: string;
        args: (string | number)[];
        type: "stdio";
        timeout: number;
        enabled: boolean;
        bundled: null;
        description: null;
        env_keys: string[];
        envs: Record<string, string>;
    }>;
};
declare const safeValidateMcpServersConfig: (data: unknown, params?: z.core.ParseContext<z.core.$ZodIssue>) => z.ZodSafeParseResult<{
    mcpServers: Record<string, {
        type: "http";
        url: string;
    } | {
        command: string;
        args: string[];
        type?: "stdio" | undefined;
        env?: Record<string, string> | undefined;
    } | {
        cmd: string;
        args: string[];
        type?: "stdio" | undefined;
        env?: Record<string, string> | undefined;
    }>;
}>;
declare const safeValidateVsCodeConfig: (data: unknown, params?: z.core.ParseContext<z.core.$ZodIssue>) => z.ZodSafeParseResult<{
    servers: Record<string, {
        type: "http";
        url: string;
    } | {
        command: string;
        args: string[];
        type?: "stdio" | undefined;
        env?: Record<string, string> | undefined;
    } | {
        cmd: string;
        args: string[];
        type?: "stdio" | undefined;
        env?: Record<string, string> | undefined;
    }>;
}>;
declare const safeValidateGooseConfig: (data: unknown, params?: z.core.ParseContext<z.core.$ZodIssue>) => z.ZodSafeParseResult<{
    extensions: Record<string, {
        name: string;
        cmd: string;
        args: (string | number)[];
        type: "stdio";
        timeout: number;
        enabled: boolean;
        bundled: null;
        description: null;
        env_keys: string[];
        envs: Record<string, string>;
    }>;
}>;

type Platform = z.infer<typeof PlatformSchema>;
type ClientId = z.infer<typeof ClientIdSchema>;
type ClientConnectionSupport = z.infer<typeof ClientConnectionSupportSchema>;
type ServerType = z.infer<typeof ServerTypeSchema>;
type LocalConfigSupport = z.infer<typeof LocalConfigSupportSchema>;
type ServerMode = z.infer<typeof ServerModeSchema>;
type HttpConfigStructure = z.infer<typeof HttpConfigStructureSchema>;
type StdioConfigStructure = z.infer<typeof StdioConfigStructureSchema>;
type ConfigStructure = z.infer<typeof ConfigStructureSchema>;
type PlatformPaths = z.infer<typeof PlatformPathsSchema>;
type MCPClientConfig = z.infer<typeof MCPClientConfigSchema>;
type GleanServerConfig = z.infer<typeof GleanServerConfigSchema>;
type BuildOptions = z.infer<typeof BuildOptionsSchema>;
type HttpServerConfig = z.infer<typeof HttpServerConfigSchema>;
type StdioServerConfig = z.infer<typeof StdioServerConfigSchema>;
type StdioServerConfigAlt = z.infer<typeof StdioServerConfigAltSchema>;
type ServerConfig = z.infer<typeof ServerConfigSchema>;
type McpServersConfig = z.infer<typeof McpServersConfigSchema>;
type VsCodeConfig = z.infer<typeof VsCodeConfigSchema>;
type GooseServerConfig = z.infer<typeof GooseServerConfigSchema>;
type GooseConfig = z.infer<typeof GooseConfigSchema>;
interface ValidationResult {
    success: boolean;
    data?: unknown;
    error?: z.ZodError;
}

/**
 * Canonical client IDs for MCP clients
 */
declare const CLIENT: {
    readonly CLAUDE_CODE: "claude-code";
    readonly CLAUDE_DESKTOP: "claude-desktop";
    readonly CLAUDE_TEAMS_ENTERPRISE: "claude-teams-enterprise";
    readonly CURSOR: "cursor";
    readonly VSCODE: "vscode";
    readonly WINDSURF: "windsurf";
    readonly GOOSE: "goose";
    readonly CHATGPT: "chatgpt";
};
/**
 * Display names for MCP clients
 */
declare const CLIENT_DISPLAY_NAME: {
    readonly CLAUDE_CODE: "Claude Code";
    readonly CLAUDE_DESKTOP: "Claude for Desktop";
    readonly CLAUDE_TEAMS_ENTERPRISE: "Claude for Teams/Enterprise";
    readonly CURSOR: "Cursor";
    readonly VSCODE: "VS Code";
    readonly WINDSURF: "Windsurf";
    readonly GOOSE: "Goose";
    readonly CHATGPT: "ChatGPT";
};
/**
 * Type-safe client ID type derived from the constants
 */
type ClientIdConstant = (typeof CLIENT)[keyof typeof CLIENT];
/**
 * Type-safe display name type derived from the constants
 */
type ClientDisplayName = (typeof CLIENT_DISPLAY_NAME)[keyof typeof CLIENT_DISPLAY_NAME];
/**
 * Helper to get display name from client ID
 */
declare function getDisplayName(clientId: ClientIdConstant): ClientDisplayName;

/**
 * Centralized server name logic for MCP configurations
 */
/**
 * Extracts the server name from a full MCP URL
 * e.g., https://my-be.glean.com/mcp/analytics -> analytics
 */
declare function extractServerNameFromUrl(url: string): string | null;
/**
 * Builds a consistent server name for MCP configurations
 *
 * Rules:
 * - Local mode: 'glean_local'
 * - Agents mode: 'glean_agents'
 * - Remote with URL ending in /mcp/default: 'glean_default' (for consistency)
 * - Remote with other URLs: 'glean_<extracted-name>'
 * - Fallback: 'glean'
 */
declare function buildMcpServerName(options: {
    mode?: 'local' | 'remote';
    serverUrl?: string;
    serverName?: string;
    agents?: boolean;
}): string;
/**
 * Normalizes a server name to ensure consistency
 * This is useful when accepting user input that might not follow conventions
 */
declare function normalizeServerName(name: string): string;

declare class ConfigBuilder {
    private config;
    private platform;
    constructor(config: MCPClientConfig);
    private detectPlatform;
    buildConfiguration(gleanConfig: GleanServerConfig): string;
    private buildLocalConfig;
    private buildRemoteConfig;
    buildOneClickUrl(gleanConfig: GleanServerConfig): string;
    getConfigPath(): string;
    private expandPath;
    writeConfiguration(gleanConfig: GleanServerConfig): Promise<void>;
}

declare class MCPConfigRegistry {
    private configs;
    constructor();
    private loadConfigs;
    private validateBusinessRules;
    getConfig(clientId: ClientId): MCPClientConfig | undefined;
    getAllConfigs(): MCPClientConfig[];
    getNativeHttpClients(): MCPClientConfig[];
    getBridgeRequiredClients(): MCPClientConfig[];
    getStdioOnlyClients(): MCPClientConfig[];
    getClientsWithOneClick(): MCPClientConfig[];
    getSupportedClients(): MCPClientConfig[];
    getClientsByPlatform(platform: Platform): MCPClientConfig[];
    getUnsupportedClients(): MCPClientConfig[];
    createBuilder(clientId: ClientId): ConfigBuilder;
}

export { type BuildOptions, BuildOptionsSchema, CLIENT, CLIENT_DISPLAY_NAME, type ClientConnectionSupport, ClientConnectionSupportSchema, type ClientDisplayName, type ClientId, type ClientIdConstant, ClientIdSchema, ConfigBuilder, type ConfigStructure, ConfigStructureSchema, type GleanServerConfig, GleanServerConfigSchema, type GooseConfig, GooseConfigSchema, type GooseServerConfig, GooseServerConfigSchema, type HttpConfigStructure, HttpConfigStructureSchema, type HttpServerConfig, HttpServerConfigSchema, type LocalConfigSupport, LocalConfigSupportSchema, type MCPClientConfig, MCPClientConfigSchema, MCPConfigRegistry, type McpServersConfig, McpServersConfigSchema, type Platform, type PlatformPaths, PlatformPathsSchema, PlatformSchema, type ServerConfig, ServerConfigSchema, type ServerMode, ServerModeSchema, type ServerType, ServerTypeSchema, type StdioConfigStructure, StdioConfigStructureSchema, type StdioServerConfig, type StdioServerConfigAlt, StdioServerConfigAltSchema, StdioServerConfigSchema, type ValidationResult, type VsCodeConfig, VsCodeConfigSchema, buildMcpServerName, extractServerNameFromUrl, getDisplayName, normalizeServerName, safeValidateClientConfig, safeValidateGooseConfig, safeValidateMcpServersConfig, safeValidateServerConfig, safeValidateVsCodeConfig, validateClientConfig, validateGeneratedConfig, validateGooseConfig, validateMcpServersConfig, validateServerConfig, validateVsCodeConfig };
