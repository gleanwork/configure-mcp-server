export var AuthErrorCode;
(function (AuthErrorCode) {
    /** Unknown error */
    AuthErrorCode["Unknown"] = "ERR_A_00";
    /** Using glean-token config for OAuth flow */
    AuthErrorCode["GleanTokenConfigUsedForOAuth"] = "ERR_A_01";
    /** Network error fetching OAuth authorization server metadata */
    AuthErrorCode["AuthServerMetadataNetwork"] = "ERR_A_02";
    /** Parse error in OAuth authorization server metadata */
    AuthErrorCode["AuthServerMetadataParse"] = "ERR_A_03";
    /** Token endpoint missing in OAuth server metadata */
    AuthErrorCode["AuthServerMetadataMissingTokenEndpoint"] = "ERR_A_04";
    /** Device authorization endpoint missing in OAuth server metadata */
    AuthErrorCode["AuthServerMetadataMissingDeviceEndpoint"] = "ERR_A_05";
    /** Network error fetching OAuth protected resource metadata */
    AuthErrorCode["ProtectedResourceMetadataNetwork"] = "ERR_A_06";
    /** Non-ok response fetching OAuth protected resource metadata */
    AuthErrorCode["ProtectedResourceMetadataNotOk"] = "ERR_A_07";
    /** Parse error in OAuth protected resource metadata */
    AuthErrorCode["ProtectedResourceMetadataParse"] = "ERR_A_08";
    /** Authorization servers missing in OAuth protected resource metadata */
    AuthErrorCode["ProtectedResourceMetadataMissingAuthServers"] = "ERR_A_09";
    /** Device flow client id missing in OAuth protected resource metadata */
    AuthErrorCode["ProtectedResourceMetadataMissingClientId"] = "ERR_A_10";
    /** Tried to refresh tokens with glean-token config */
    AuthErrorCode["GleanTokenConfigUsedForOAuthRefresh"] = "ERR_A_11";
    /** No saved refresh token found */
    AuthErrorCode["RefreshTokenNotFound"] = "ERR_A_12";
    /** Refresh token property missing */
    AuthErrorCode["RefreshTokenMissing"] = "ERR_A_13";
    /** Unexpected response fetching access token */
    AuthErrorCode["UnexpectedAccessTokenResponse"] = "ERR_A_14";
    /** Server error when fetching token */
    AuthErrorCode["FetchTokenServerError"] = "ERR_A_15";
    /** Unexpected error requesting authorization grant */
    AuthErrorCode["UnexpectedAuthGrantError"] = "ERR_A_16";
    /** Timed out waiting for OAuth device flow polling */
    AuthErrorCode["OAuthPollingTimeout"] = "ERR_A_17";
    /** No interactive terminal for OAuth device authorization flow */
    AuthErrorCode["NoInteractiveTerminal"] = "ERR_A_18";
    /** Invalid or missing Glean configuration */
    AuthErrorCode["InvalidConfig"] = "ERR_A_19";
    /** Unexpected response fetching access token */
    AuthErrorCode["UnexpectedAuthGrantResponse"] = "ERR_A_20";
    /** Missing OAuth metadata required for MCP remote setup */
    AuthErrorCode["MissingOAuthMetadata"] = "ERR_A_21";
    /** Missing OAuth tokens required for MCP remote setup */
    AuthErrorCode["MissingOAuthTokens"] = "ERR_A_22";
    /** Refresh token not issued by authorization server */
    AuthErrorCode["RefreshTokenNotIssued"] = "ERR_A_23";
})(AuthErrorCode || (AuthErrorCode = {}));
/**
 * AuthError is an error that will be shown to the end user (with a message, no
 * stack trace).
 *
 * If AuthError is caught it should be re-thrown directly.
 */
export class AuthError extends Error {
    constructor(message, options = {}) {
        var _a;
        const code = (_a = options.code) !== null && _a !== void 0 ? _a : AuthErrorCode.Unknown;
        const { cause } = options;
        super(`${code}: ${message}`, cause !== undefined ? { cause } : undefined);
        this.code = code;
        this.name = 'AuthError';
        Error.captureStackTrace(this, this.constructor);
    }
}
//# sourceMappingURL=error.js.map