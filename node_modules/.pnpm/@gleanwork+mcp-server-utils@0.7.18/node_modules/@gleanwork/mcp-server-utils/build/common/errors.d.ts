/**
 * @fileoverview Error handling utilities for the Glean MCP server.
 *
 * This module provides custom error types and type guards for handling
 * Glean-specific errors in a consistent way across the codebase.
 *
 * @module common/errors
 */
/**
 * Custom error class for Glean-specific errors.
 * Includes additional context about the error such as HTTP status and response data.
 *
 * @extends {Error}
 */
export declare class GleanError extends Error {
    readonly status: number;
    readonly response: unknown;
    constructor(message: string, status: number, response: unknown);
}
/**
 * Error class for invalid request errors (HTTP 400).
 *
 * @extends {GleanError}
 */
export declare class GleanInvalidRequestError extends GleanError {
    constructor(message?: string, response?: unknown);
}
/**
 * Error class for authentication errors (HTTP 401).
 *
 * @extends {GleanError}
 */
export declare class GleanAuthenticationError extends GleanError {
    constructor(message?: string, response?: unknown);
}
/**
 * Error class for permission errors (HTTP 403).
 *
 * @extends {GleanError}
 */
export declare class GleanPermissionError extends GleanError {
    constructor(message?: string, response?: unknown);
}
/**
 * Error class for request timeout errors (HTTP 408).
 *
 * @extends {GleanError}
 */
export declare class GleanRequestTimeoutError extends GleanError {
    constructor(message?: string, response?: unknown);
}
/**
 * Error class for validation errors (HTTP 422).
 *
 * @extends {GleanError}
 */
export declare class GleanValidationError extends GleanError {
    constructor(message?: string, response?: unknown);
}
/**
 * Error class for rate limit errors (HTTP 429).
 *
 * @extends {GleanError}
 */
export declare class GleanRateLimitError extends GleanError {
    readonly resetAt: Date;
    constructor(message?: string, resetAt?: Date, response?: unknown);
}
/**
 * Type guard to check if an error is a GleanError.
 *
 * @param {unknown} error - The error to check
 * @returns {boolean} True if the error is a GleanError
 */
export declare function isGleanError(error: unknown): error is GleanError;
/**
 * Creates a specific GleanError subclass based on the HTTP status code.
 *
 * @param {number} status - The HTTP status code
 * @param {any} response - The response data
 * @returns {GleanError} The appropriate GleanError subclass
 */
export declare function createGleanError(status: number, response: any): GleanError;
/**
 * Formats a GleanError into a human-readable error message.
 * This function provides detailed error messages based on the specific error type.
 *
 * @param {GleanError} error - The error to format
 * @returns {string} A formatted error message
 */
export declare function formatGleanError(error: GleanError): string;
//# sourceMappingURL=errors.d.ts.map