import { attemptUpgradeConfigToOAuth } from '../auth/auth.js';
import { loadOAuthMetadata } from '../auth/oauth-cache.js';
import { stripUndefined } from '../util/object.js';
/**
 * Type guard to check if a GleanConfig uses token authentication
 */
export function isGleanTokenConfig(config) {
    return config.authType === 'token';
}
/**
 * Type guard to check if a GleanConfig uses OAuth authentication
 */
export function isOAuthConfig(config) {
    return config.authType === 'oauth';
}
/**
 * Type guard to check if a GleanConfig uses OAuth authentication
 */
export function isBasicConfig(config) {
    return config.authType === 'unknown';
}
/**
 * Validates required environment variables and returns client configuration.
 *
 * @param opts - Configuration options
 * @param opts.discoverOAuth - If true, attempts to discover OAuth
 * configuration via network calls to load oauth protected resource metadata.
 * Guarantees the return type is not a GleanBasicConfig
 * @returns A promise that resolves to:
 *   - GleanTokenConfig | GleanOAuthConfig if discoverOAuth is true
 *   - GleanConfig (which may include GleanBasicConfig) if discoverOAuth is false
 * @throws {Error} If required environment variables are missing
 */
export async function getConfig(opts) {
    const config = getLocalConfig();
    if ((opts === null || opts === void 0 ? void 0 : opts.discoverOAuth) === true && !isOAuthConfig(config)) {
        return attemptUpgradeConfigToOAuth(config);
    }
    else {
        // It's probably possible to avoid this cast with some type guards, but
        // it's annoying.
        return config;
    }
}
function getLocalConfig() {
    const instance = process.env.GLEAN_INSTANCE || process.env.GLEAN_SUBDOMAIN;
    const baseUrl = process.env.GLEAN_BASE_URL;
    const token = process.env.GLEAN_API_TOKEN;
    const actAs = process.env.GLEAN_ACT_AS;
    const issuer = process.env.GLEAN_OAUTH_ISSUER;
    const clientId = process.env.GLEAN_OAUTH_CLIENT_ID;
    const clientSecret = process.env.GLEAN_OAUTH_CLIENT_SECRET;
    const authorizationEndpoint = process.env.GLEAN_OAUTH_AUTHORIZATION_ENDPOINT;
    const tokenEndpoint = process.env.GLEAN_OAUTH_TOKEN_ENDPOINT;
    if (token !== undefined && (issuer !== undefined || clientId !== undefined)) {
        throw new Error(`Specify either GLEAN_OAUTH_ISSUER and GLEAN_OAUTH_CLIENT_ID or GLEAN_API_TOKEN, but not both.`);
    }
    if (token !== undefined) {
        return buildTokenConfig({
            token,
            instance,
            baseUrl,
            actAs,
        });
    }
    let config = buildBasicConfig({
        instance,
        baseUrl,
        issuer,
        clientId,
        clientSecret,
        authorizationEndpoint,
        tokenEndpoint,
    });
    config = Object.assign(Object.assign({}, stripUndefined(config)), { baseUrl: config.baseUrl, authType: config.authType });
    const oauthConfig = loadOAuthMetadata();
    if (oauthConfig !== null) {
        // We have a saved OAuth config that's recent. No need to discover
        // anything, but let the user override individual things, mostly for
        // testing/debugging.
        const result = Object.assign(Object.assign(Object.assign({}, oauthConfig), config), { authType: 'oauth' });
        if ('clientSecret' in result && result.clientSecret === undefined) {
            delete result['clientSecret'];
        }
        return result;
    }
    // No saved OAuth config, just return a basic config and try to discover
    // OAuth.
    return config;
}
export function sanitizeConfig(config) {
    const result = Object.assign({}, config);
    if ('token' in result) {
        delete result.token;
    }
    return result;
}
function buildGleanBaseUrl({ baseUrl, instance, }) {
    if (!baseUrl) {
        if (!instance) {
            throw new Error('GLEAN_INSTANCE environment variable is required');
        }
        return `https://${instance}-be.glean.com/`;
    }
    return baseUrl;
}
function buildBasicConfig({ instance, baseUrl, issuer, clientId, clientSecret, authorizationEndpoint, tokenEndpoint, }) {
    return {
        authType: 'unknown',
        baseUrl: buildGleanBaseUrl({ instance, baseUrl }),
        issuer,
        clientId,
        clientSecret,
        authorizationEndpoint,
        tokenEndpoint,
    };
}
function buildTokenConfig({ token, actAs, baseUrl, instance, }) {
    if (!token) {
        throw new Error('GLEAN_API_TOKEN environment variable is required');
    }
    return Object.assign({ authType: 'token', baseUrl: buildGleanBaseUrl({ instance, baseUrl }), token }, (actAs ? { actAs } : {}));
}
//# sourceMappingURL=index.js.map