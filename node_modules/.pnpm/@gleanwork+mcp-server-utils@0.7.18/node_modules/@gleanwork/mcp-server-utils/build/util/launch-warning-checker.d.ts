/**
 * Result of checking for launch warnings
 */
export interface LaunchWarningResult {
    /** Whether a warning URL was found and opened */
    opened: boolean;
    /** The URL that was checked */
    url: string;
    /** Any error that occurred during the process */
    error?: Error;
}
/**
 * Determines the version string to use in the URL based on semantic versioning rules
 * - If major version > 0: Use only the major version (e.g., "1.2.3" → "v1")
 * - If major version = 0: Use major.minor (e.g., "0.6.3" → "v0.6")
 */
export declare function getVersionString(version: string): string;
/**
 * Builds the launch warning URL based on the version
 */
export declare function buildLaunchWarningUrl(version: string): string;
/**
 * Checks if a URL exists by making a HEAD request
 * Returns true if the URL exists (status 200-299), false otherwise
 */
export declare function checkUrlExists(url: string): Promise<boolean>;
/**
 * Opens a URL in the default browser
 */
export declare function openInBrowser(url: string): Promise<void>;
/**
  Checks for known version-specific launch warnings and automatically opens
  them in the browser.
  
  This function is the main entry point for the launch warning system. It
  takes a package version, constructs a URL to check for known issues
  documentation, verifies the URL exists remotely, and if found, opens the
  warning page in the user's default browser.
  
  @param version - The semantic version string of the package (e.g., "1.2.3", "0.6.1")
  
  @returns Promise resolving to LaunchWarningResult containing:
    - `opened`: true if a warning was found and browser was opened, false otherwise
    - `url`: the warning URL that was constructed and checked
    - `error`: any error that occurred during URL building, network checking, or browser opening
  
  @example
  ```typescript
  const result = await checkAndOpenLaunchWarning("1.2.3");
  if (result.opened) {
    console.log(`Opened warning page: ${result.url}`);
  } else if (result.error) {
    console.error(`Failed to check warnings: ${result.error.message}`);
  } else {
    console.log(`No warnings found for version 1.2.3`);
  }
  ```
  
  @throws Never throws directly - all errors are caught and returned in the result object
 */
export declare function checkAndOpenLaunchWarning(version: string): Promise<LaunchWarningResult>;
//# sourceMappingURL=launch-warning-checker.d.ts.map