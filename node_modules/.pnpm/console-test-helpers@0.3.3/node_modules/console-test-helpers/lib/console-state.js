"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const CONSOLE_WRITE_METHODS = [
    'log',
    'debug',
    'info',
    'warn',
    'error',
    'dir',
    'trace',
    'group',
    'groupCollapsed',
    'groupEnd',
    'table',
];
class ConsoleState {
    constructor() {
        this.state = new Map();
    }
    record(method, message) {
        var _a;
        this.verifyMethod(method);
        if (!this.state.has(method)) {
            this.state.set(method, []);
        }
        let methodState = this.state.get(method);
        (_a = methodState) === null || _a === void 0 ? void 0 : _a.push(message);
    }
    getState(method) {
        var _a;
        this.verifyMethod(method);
        return ((_a = this.state.get(method)) === null || _a === void 0 ? void 0 : _a.join('\n')) || '';
    }
    log() {
        return this.getState('log');
    }
    debug() {
        return this.getState('debug');
    }
    info() {
        return this.getState('info');
    }
    warn() {
        return this.getState('warn');
    }
    error() {
        return this.getState('error');
    }
    dir() {
        return this.getState('dir');
    }
    group() {
        return this.getState('group');
    }
    groupCollapsed() {
        return this.getState('groupCollapsed');
    }
    groupEnd() {
        return this.getState('groupEnd');
    }
    table() {
        return this.getState('table');
    }
    verifyMethod(method) {
        if (!CONSOLE_WRITE_METHODS.includes(method)) {
            throw new Error(`The supplied method '${method}' is not supported`);
        }
    }
}
exports.default = ConsoleState;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc29sZS1zdGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jb25zb2xlLXN0YXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxxQkFBcUIsR0FBRztJQUM1QixLQUFLO0lBQ0wsT0FBTztJQUNQLE1BQU07SUFDTixNQUFNO0lBQ04sT0FBTztJQUNQLEtBQUs7SUFDTCxPQUFPO0lBQ1AsT0FBTztJQUNQLGdCQUFnQjtJQUNoQixVQUFVO0lBQ1YsT0FBTztDQUNSLENBQUM7QUFFRixNQUFxQixZQUFZO0lBRy9CO1FBQ0UsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLEdBQUcsRUFBeUIsQ0FBQztJQUNoRCxDQUFDO0lBRUQsTUFBTSxDQUFDLE1BQWMsRUFBRSxPQUFlOztRQUNwQyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRTFCLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUMzQixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDNUI7UUFFRCxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV6QyxNQUFBLFdBQVcsMENBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRTtJQUM3QixDQUFDO0lBRUQsUUFBUSxDQUFDLE1BQWM7O1FBQ3JCLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFMUIsT0FBTyxPQUFBLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQywwQ0FBRSxJQUFJLENBQUMsSUFBSSxNQUFLLEVBQUUsQ0FBQztJQUNsRCxDQUFDO0lBRUQsR0FBRztRQUNELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRUQsS0FBSztRQUNILE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsSUFBSTtRQUNGLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQsSUFBSTtRQUNGLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQsS0FBSztRQUNILE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsR0FBRztRQUNELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRUQsS0FBSztRQUNILE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsY0FBYztRQUNaLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFRCxLQUFLO1FBQ0gsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFTyxZQUFZLENBQUMsTUFBYztRQUNqQyxJQUFJLENBQUMscUJBQXFCLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQzNDLE1BQU0sSUFBSSxLQUFLLENBQUMsd0JBQXdCLE1BQU0sb0JBQW9CLENBQUMsQ0FBQztTQUNyRTtJQUNILENBQUM7Q0FDRjtBQXRFRCwrQkFzRUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBDT05TT0xFX1dSSVRFX01FVEhPRFMgPSBbXG4gICdsb2cnLFxuICAnZGVidWcnLFxuICAnaW5mbycsXG4gICd3YXJuJyxcbiAgJ2Vycm9yJyxcbiAgJ2RpcicsXG4gICd0cmFjZScsXG4gICdncm91cCcsXG4gICdncm91cENvbGxhcHNlZCcsXG4gICdncm91cEVuZCcsXG4gICd0YWJsZScsXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb25zb2xlU3RhdGUge1xuICBzdGF0ZTogTWFwPHN0cmluZywgQXJyYXk8c3RyaW5nPj47XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5zdGF0ZSA9IG5ldyBNYXA8c3RyaW5nLCBBcnJheTxzdHJpbmc+PigpO1xuICB9XG5cbiAgcmVjb3JkKG1ldGhvZDogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICB0aGlzLnZlcmlmeU1ldGhvZChtZXRob2QpO1xuXG4gICAgaWYgKCF0aGlzLnN0YXRlLmhhcyhtZXRob2QpKSB7XG4gICAgICB0aGlzLnN0YXRlLnNldChtZXRob2QsIFtdKTtcbiAgICB9XG5cbiAgICBsZXQgbWV0aG9kU3RhdGUgPSB0aGlzLnN0YXRlLmdldChtZXRob2QpO1xuXG4gICAgbWV0aG9kU3RhdGU/LnB1c2gobWVzc2FnZSk7XG4gIH1cblxuICBnZXRTdGF0ZShtZXRob2Q6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgdGhpcy52ZXJpZnlNZXRob2QobWV0aG9kKTtcblxuICAgIHJldHVybiB0aGlzLnN0YXRlLmdldChtZXRob2QpPy5qb2luKCdcXG4nKSB8fCAnJztcbiAgfVxuXG4gIGxvZygpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmdldFN0YXRlKCdsb2cnKTtcbiAgfVxuXG4gIGRlYnVnKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RhdGUoJ2RlYnVnJyk7XG4gIH1cblxuICBpbmZvKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RhdGUoJ2luZm8nKTtcbiAgfVxuXG4gIHdhcm4oKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdGF0ZSgnd2FybicpO1xuICB9XG5cbiAgZXJyb3IoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdGF0ZSgnZXJyb3InKTtcbiAgfVxuXG4gIGRpcigpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmdldFN0YXRlKCdkaXInKTtcbiAgfVxuXG4gIGdyb3VwKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RhdGUoJ2dyb3VwJyk7XG4gIH1cblxuICBncm91cENvbGxhcHNlZCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmdldFN0YXRlKCdncm91cENvbGxhcHNlZCcpO1xuICB9XG5cbiAgZ3JvdXBFbmQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdGF0ZSgnZ3JvdXBFbmQnKTtcbiAgfVxuXG4gIHRhYmxlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RhdGUoJ3RhYmxlJyk7XG4gIH1cblxuICBwcml2YXRlIHZlcmlmeU1ldGhvZChtZXRob2Q6IHN0cmluZykge1xuICAgIGlmICghQ09OU09MRV9XUklURV9NRVRIT0RTLmluY2x1ZGVzKG1ldGhvZCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIHN1cHBsaWVkIG1ldGhvZCAnJHttZXRob2R9JyBpcyBub3Qgc3VwcG9ydGVkYCk7XG4gICAgfVxuICB9XG59XG4iXX0=